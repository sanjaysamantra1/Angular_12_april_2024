To transform the array:
	map(func) – creates a new array from original array by calling func for every element.
	sort(func) – sorts the array in-place, then returns it.
	reverse	() – reverses the array in-place, then returns it.
	split/join – convert a string to array and back.
	reduce(func, initial) – calculate a single value over the array by calling func for 	each element and passing an intermediate result between the calls.
	flat()   - creates a new array with the elements of the subarrays concatenated into it.flat(Infinity) , flat() also removes holes in array
	flatMap() - maps each element in an array using a mapping function and then flattens the results into a new array
	
To iterate over elements:
	forEach()	– calls func for every element, does not return anything.
	
	
Additionally:
	Array.isArray(arr) checks arr for being an array.
	Array.from()  change array-like or iterable into true array
	Array.of()  create array from every arguments passed into it.

const nums = Array.of(1, 2, 3, 4, 5, 6);
console.log(nums);


let mySet = new Set()
mySet.add(2).add(3).add(4);
console.log(Array.from(mySet))

const lis = document.querySelectorAll('li');
const lisArray = Array.from(document.querySelectorAll('li'));

// is true array?
console.log(Array.isArray(lis)); // output: false
console.log(Array.isArray(lisArray));  // output: true

var arr = [10,20,30]
var x = arr.values();
console.log(x)
var y = Array.from(x)
console.log(y)


Array Copy
==========
let arr1 = [10, 20];
let arr2 = arr1;  // address/reference copy ( Not value copy)
-A new array is not being created, rather same address is being assigned to arr2
-Both arr1 & arr2 are holding the same address

let arr1 = [10, 20, [30, 31]];
let arr2 = [...arr1]; // value copy - shallow copy

let arr3 = [10, 20, [30, 31]];
let arr4 = structuredClone(arr3); // value copy - Deep Copy

-A shallow copy of an array is a copy whose nested elements share the same references.
 (Nested arrays will not be copied by value)
-A deep copy of an array is a copy whose nested elements do not share the same references.